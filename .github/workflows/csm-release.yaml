# Copyright (c) 2024 Dell Inc., or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0

# This workflow is used to release libraries like gobrick, gofsutil etc.
name: Test Release CSM

# Invocable as a reusable workflow
on:
  workflow_call:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (major, minor, patch), ex: 1.0.0'
        required: true
        # TODO: remove default from here and caller workflows in goclients
        default: 'none'

jobs:
  build-and-scan:
    name: Build and Release
    runs-on: ubuntu-latest
    steps:
      - name: Validate version input
        run: |
          if [[ "${{ github.event.inputs.version }}" == "none" ]]; then
            echo "Invalid version specified: ${{ github.event.inputs.version }} Must follow major, minor, patch versioning."
            exit 1
          fi
      - name: Checkout the code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - name: Fetch all tags
        run: git fetch --tags

      - name: Create new tag
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git tag v${{ github.event.inputs.version }}
          git push origin v${{ github.event.inputs.version }}

      - name: Create Pull request
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: update-common-dependency
          # base: test-release2
          title: "Update common dependency to ${{ env.common_new_version }}"
          body: "This PR updates the common dependency to ${{ env.common_new_version }}."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check branch status
        run: |
          echo "Checking branch status..."
          git status
          git branch -a
          git log -1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      - name: Wait for PR to be merged
        run: |
          echo "Waiting for the PR to be merged. Please merge the PR manually."
          while true; do
            pr_status=$(gh pr view update-common-dependency --json state --jq '.state')
            if [ "$pr_status" = "MERGED" ]; then
              echo "PR has been merged."
              break
            fi
            echo "PR not merged yet. Sleeping for 1 minute..."
            sleep 60
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}